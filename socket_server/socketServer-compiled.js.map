{"version":3,"sources":["socketServer.js"],"names":[],"mappings":"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","file":"socketServer-compiled.js","sourcesContent":["/**\n * Created by liboyuan on 2016/10/13.\n */\n\nvar io = require('socket.io')();\nvar ioReq = require(\"socket.io-request\");\nvar RequestTypes = require('../consts/requestTypes');\nvar User = require('../daos/userDAO');\nvar sessionHandler = require(\"../sessions/loginSession\");\nvar validator = require('../utils/validator');\n\nio.on('connection', (socket) => {\n    console.log('connect from ' + socket.id);\n\n    ioReq(socket).response(RequestTypes.AUTH, function (req, res) {\n        //TODO 添加agent\n        console.log(req);\n        switch (req.type) {\n            case RequestTypes.AUTH_TYPES.AUTH_CODE:\n                var username = sessionHandler.findUsernameBySession(req.authenticationCode);\n                if (!username) {\n                    res({success: false, errorInfo: '登录已失效'});\n                } else {\n                    res({\n                        success: true, username: username,\n                        authenticationCode: req.authenticationCode\n                    });\n                }\n                break;\n            case RequestTypes.AUTH_TYPES.LOGIN:\n                User.findOne({username: req.username}, (err, user) => {\n                    if (err) {\n                        res({success: false, errorInfo: '数据库内部错误'});\n                    } else if (!user) {\n                        res({success: false, errorInfo: '找不到用户'});\n                    } else if (user.password != req.password) {\n                        res({success: false, errorInfo: '密码错误'});\n                    } else {\n                        res({\n                            success: true, username: req.username,\n                            authenticationCode: sessionHandler.createSession(req.username, req.password)\n                        });\n                    }\n                });\n                break;\n            case RequestTypes.AUTH_TYPES.REG_AND_LOGIN:\n                var username = req.username;\n                var password = req.password;\n                if (!validator.isUsername(username)) {\n                    res({success: false, errorInfo: '用户名不符合规范:' + validator.usernameReg});\n                } else if (!validator.isPassword(password)) {\n                    res({success: false, errorInfo: '密码不符合规范:' + validator.passwordReg});\n                } else {\n                    User.findOne({username: username}, function (err, user) {\n                        if (err) {\n                            res({success: false, errorInfo: '数据库内部错误'});\n                        } else if (user) {\n                            res({success: false, errorInfo: '用户名已存在'});\n                        } else {\n                            new User({\n                                username: username,\n                                password: password\n                            }).save();\n                        }\n                        res({\n                            success: true, username: username,\n                            authenticationCode: sessionHandler.createSession(username, password)\n                        });\n                    });\n                }\n                break;\n            default:\n                res({success: false, errorInfo: '未知的验证方式'});\n                break;\n        }\n    });\n\n    // ioReq(socket).response()\n});\n\nmodule.exports = io;"]}